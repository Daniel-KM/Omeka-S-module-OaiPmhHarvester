<?php
/**
 * @var \Laminas\View\Renderer\PhpRenderer $this
 * @var \OaiPmhHarvester\Form\SetsForm $form
 * @var string $endpoint
 * @var string $repositoryName
 * @var int|null $total
 * @var bool $harvestAllRecords
 */

$plugins = $this->getHelperPluginManager();
$assetUrl = $plugins->get('assetUrl');
$translate = $plugins->get('translate');

$this->htmlElement('body')
    ->appendAttribute('class', 'oai-pmh-harvester oai-pmh-harvester-sets');

$this->headLink()
    ->appendStylesheet($assetUrl('css/oai-pmh-harvester.css', 'OaiPmhHarvester'));
$this->headScript()
    ->appendFile($assetUrl('js/oai-pmh-harvester.js', 'OaiPmhHarvester'));

$sets = $form->getOption('sets') ?: [];
?>

<?= $this->pageTitle($translate('Prepare import'), 1, $translate('OAI-PMH Harvester')) ?>

<div id="page-actions">
    <button form="harvest-list-sets-form" type="submit" class="button"><?= $translate('Harvest') ?></button>
</div>

<nav class="section-nav">
    <?= $this->navigation('Laminas\Navigation\OaiPmhHarvester')->menu() ?>
</nav>

<h2><?= $repositoryName ?></h2>
<p>
    <?php if (is_null($total)): ?>
        <?= sprintf($translate('The repository %1$s (%2$s) has an undefined number of sets.'), $repositoryName, $endpoint) ?>
    <?php else: ?>
        <?= sprintf($translate('The repository %1$s (%2$s) has %3$d sets.'), $repositoryName, $endpoint, $total) ?>
        <?php if ($total && $total > count($sets)): ?>
            <?= sprintf($translate('Only the first %d are displayed.'), count($sets)) ?>
        <?php endif; ?>
    <?php endif; ?>
</p>

<?php if (!$harvestAllRecords): ?>
<p>
    <?= $translate('Please choose a set to import.') ?>
</p>
<?php endif; ?>

<?= $this->form($form) ?>

<div style="float: right">
    <label for="nbrPerPage">Number of Sets per page:</label>
    <select onclick="updateNbrPerPage()" name="nbrPerPage" id="pagination_nbrPerPage">
        <option value="5">5</option>
        <option value="10">10</option>
        <option selected value="25">25</option>
        <option value="50">50</option>
        <option value="100">100</option>
        <option value="250">250</option>
        <option value="500">500</option>
        <option value="1000">1000</option>
    </select>

    <button id="pagination_prev_button" onclick="prevPage()">Previous Page</button>
    <span id="pagination_page_idx">1</span>
    <button id="pagination_next_button" onclick="nextPage()">Next Page</button>
</div>

<script>
    function updateVisibility(fieldsetArray, pageIdx, nbrPerPage) {
        document.getElementById("pagination_page_idx").textContent = "" + (pageIdx + 1);
        document.getElementById("pagination_prev_button").disabled = pageIdx == 0;
        document.getElementById("pagination_next_button").disabled = (pageIdx+1) * parseInt(nbrPerPage) >= fieldsets.length;

        let startIdx = pageIdx * parseInt(nbrPerPage);
        let endIdx = startIdx + parseInt(nbrPerPage);
        for (let i = 0; i < fieldsetArray.length; ++i) {
            if (i >= startIdx && i < endIdx) {
                fieldsetArray[i].classList.remove('hidden');
            } else {
                fieldsetArray[i].classList.add('hidden');
            }
        }
    }

    const fieldsets = document.querySelectorAll('form fieldset.set');
    let pageIdx = 0;
    let nbrPerPage = document.getElementById("pagination_nbrPerPage").value;
    updateVisibility(fieldsets, pageIdx, nbrPerPage)
    function fixPageIdx() {
        if(pageIdx < 0) {
            pageIdx = 0;
        } else if (pageIdx * nbrPerPage >= fieldsets.length) {
            pageIdx = Math.floor((fieldsets.length-1) / nbrPerPage);
        }
    }
    function updateNbrPerPage() {
        nbrPerPage = document.getElementById("pagination_nbrPerPage").value;
        fixPageIdx();
        updateVisibility(fieldsets, pageIdx, nbrPerPage)
    }
    function page(delta) {
        pageIdx += delta;
        fixPageIdx();
        updateVisibility(fieldsets, pageIdx, nbrPerPage);
    }
    function nextPage() {
        page(+1);
    }
    function prevPage() {
        page(-1);
    }


    // This snippet of code remove useless POST attributes in order to don't exceed the limit of the php server
    // A typical default configuration of max field for a php server is 1000
    document.getElementById("harvest-list-sets-form").addEventListener(
        'submit',
        function(e) {
            e.preventDefault();
            document.querySelectorAll('fieldset.set').forEach(fieldset => {
                // Cherche la checkbox "harvest" dans le fieldset
                const checkbox = fieldset.querySelector('.fieldset-checkbox');

                if (checkbox && !checkbox.checked) {
                    // Si présent et non cochée : supprimer tous les champs nommés dans ce fieldset
                    fieldset.querySelectorAll('[name]').forEach(el => el.remove());
                }
            });

            let cpt = 0;
            new FormData(this).forEach(() => ++cpt); // count how many fields will be sent in the POST request.
            if(cpt > 999) {
                let text = "More than 999 fields have been submitted in the request; it's possible that not all the data will be taken into account. "
                    + "\nDo you want to continue?";
                if (!confirm(text)) {
                    return;
                }
            }

            this.submit();
        }
    );
</script>



