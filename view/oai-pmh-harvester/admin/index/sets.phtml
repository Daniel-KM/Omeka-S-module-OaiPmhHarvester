<?php
/**
 * @var \Laminas\View\Renderer\PhpRenderer $this
 * @var \OaiPmhHarvester\Form\SetsForm $form
 * @var string $endpoint
 * @var string $repositoryName
 * @var int|null $total
 * @var bool $harvestAllRecords
 */

$plugins = $this->getHelperPluginManager();
$assetUrl = $plugins->get('assetUrl');
$translate = $plugins->get('translate');

$this->htmlElement('body')
    ->appendAttribute('class', 'oai-pmh-harvester oai-pmh-harvester-sets');

$this->headLink()
    ->appendStylesheet($assetUrl('css/oai-pmh-harvester.css', 'OaiPmhHarvester'));
$this->headScript()
    ->appendFile($assetUrl('js/oai-pmh-harvester.js', 'OaiPmhHarvester'));

$sets = $form->getOption('sets') ?: [];
?>

<?= $this->pageTitle($translate('Prepare import'), 1, $translate('OAI-PMH Harvester')) ?>

<div id="page-actions">
    <button form="harvest-list-sets-form" type="submit" class="button"><?= $translate('Harvest') ?></button>
</div>

<nav class="section-nav">
    <?= $this->navigation('Laminas\Navigation\OaiPmhHarvester')->menu() ?>
</nav>

<h2><?= $repositoryName ?></h2>
<p>
    <?php if (is_null($total)): ?>
        <?= sprintf($translate('The repository %1$s (%2$s) has an undefined number of sets.'), $repositoryName, $endpoint) ?>
    <?php else: ?>
        <?= sprintf($translate('The repository %1$s (%2$s) has %3$d sets.'), $repositoryName, $endpoint, $total) ?>
        <?php if ($total && $total > count($sets)): ?>
            <?= sprintf($translate('Only the first %d are displayed.'), count($sets)) ?>
        <?php endif; ?>
    <?php endif; ?>
</p>

<?php if (!$harvestAllRecords): ?>
<p>
    <?= $translate('Please choose a set to import.') ?>
</p>
<?php endif; ?>

<div class="pagination pagination-header" style="float: right">
    <label for="nbrPerPage"><?= $translate('Number of oai sets per page') ?></label>
    <select onclick="updateNbrPerPage()" name="nbrPerPage" id="pagination_nbrPerPage">
        <option value="5">5</option>
        <option value="10">10</option>
        <option selected value="25">25</option>
        <option value="50">50</option>
        <option value="100">100</option>
        <option value="250">250</option>
        <option value="500">500</option>
        <option value="1000">1000</option>
    </select>

    <button type="button" class="button button-previous" onclick="prevPage()"><?= $translate('Previous') ?></button>
    <span class="pagination-page-index">1</span>
    <button type="button" class="button button-next" onclick="nextPage()"><?= $translate('Next') ?></button>
</div>

<?= $this->form($form) ?>

<div class="pagination pagination-footer" style="float: right">
    <label for="nbrPerPage"><?= $translate('Number of oai sets per page') ?></label>
    <select onclick="updateNbrPerPage()" name="nbrPerPage" id="pagination_nbrPerPage">
        <option value="5">5</option>
        <option value="10">10</option>
        <option selected value="25">25</option>
        <option value="50">50</option>
        <option value="100">100</option>
        <option value="250">250</option>
        <option value="500">500</option>
        <option value="1000">1000</option>
    </select>

    <button type="button" class="button button-previous" onclick="prevPage()"><?= $translate('Previous') ?></button>
    <span class="pagination-page-index">1</span>
    <button type="button" class="button button-next" onclick="nextPage()"><?= $translate('Next') ?></button>
</div>

<script>
document.addEventListener('DOMContentLoaded', function () {
    const paginationHeaders = document.querySelectorAll('.pagination.pagination-header');
    const fieldsets = document.querySelectorAll('form fieldset.set');
    const paginationPageIndexes = document.querySelectorAll('.pagination-page-index');
    const paginationPrevButtons = document.querySelectorAll('.button-previous');
    const paginationNextButtons = document.querySelectorAll('.button-next');
    const paginationNbrPerPages = document.querySelectorAll('.pagination_nbrPerPage');
    let pageIdx = 0;
    let nbrPerPage = parseInt(paginationNbrPerPages[0]?.value || 25);

    if (paginationHeaders.length && fieldsets.length) {
        fieldsets[0].parentNode.insertBefore(paginationHeaders[0], fieldsets[0]);
    }

    function updateVisibility() {
        const startIdx = pageIdx * nbrPerPage;
        const endIdx = startIdx + nbrPerPage;

        paginationPageIndexes.forEach(idx => idx.textContent = pageIdx + 1);
        paginationPrevButtons.forEach(btn => btn.disabled = pageIdx === 0);
        paginationNextButtons.forEach(btn => btn.disabled = endIdx >= fieldsets.length);

        fieldsets.forEach((fieldset, idx) => {
            fieldset.classList.toggle('hidden', idx < startIdx || idx >= endIdx);
        });
    }

    function fixPageIdx() {
        pageIdx = Math.max(0, Math.min(pageIdx, Math.floor((fieldsets.length - 1) / nbrPerPage)));
    }

    function updateNbrPerPage() {
        nbrPerPage = parseInt(paginationNbrPerPages[0]?.value || 25);
        fixPageIdx();
        updateVisibility();
    }

    function changePage(delta) {
        pageIdx += delta;
        fixPageIdx();
        updateVisibility();
    }

    paginationNbrPerPages.forEach(select => select.addEventListener('change', updateNbrPerPage));
    paginationPrevButtons.forEach(btn => btn.addEventListener('click', () => changePage(-1)));
    paginationNextButtons.forEach(btn => btn.addEventListener('click', () => changePage(1)));

    // This snippet of code remove useless POST attributes in order to don't exceed the limit of the php server
    // A typical default configuration of max field for a php server is 1000
    document.getElementById("harvest-list-sets-form").addEventListener('submit', function (e) {
        e.preventDefault();

        fieldsets.forEach(fieldset => {
            // Cherche la checkbox "harvest" dans le fieldset
            const checkbox = fieldset.querySelector('.fieldset-checkbox');
            if (checkbox && !checkbox.checked) {
                // Si présent et non cochée : supprimer tous les champs nommés dans ce fieldset
                fieldset.querySelectorAll('[name]').forEach(el => el.remove());
            }
        });

        // Count how many fields will be sent in the POST request.
        if (new FormData(this).entries().length > 999) {
            let text = "More than 1000 fields have been submitted in the request; it's possible that not all the data will be taken into account. "
                + "\nDo you want to continue?";
            if (!confirm(text)) {
                return;
            }
        }

        this.submit();
    });

    updateVisibility();
});
</script>



